<?php

declare(strict_types=1);

namespace JLucki\ODM\Spark\Schema;

use Exception;
use function count;

/**
 * The UpdateSchemaFactory renders an update schema array for the table formatted as per DynamoDB
 * requirements as outlined in the PHP SDK:
 *
 * https://docs.aws.amazon.com/aws-sdk-php/v2/api/class-Aws.DynamoDb.DynamoDbClient.html#_updateTable
 *
 * This schema is generated by comparing the original schema as provided by describeTable to the
 * current schema on the ItemInterface.
 *
 * Class SchemaFactory
 * @package JLucki\ODM\Spark\Schema
 */
class UpdateSchemaFactory
{

    /** @var array<string, mixed> */
    private const SUPPORTED_PROVISIONED_THROUGHPUT_PARAMETERS = [
        'ReadCapacityUnits' => '',
        'WriteCapacityUnits' => '',
        'OnDemand' => '',
    ];

    /** @var array<string, mixed> */
    private const SUPPORTED_PARAMETERS = [
        'TableName' => '',
        'KeySchema' => '',
        'AttributeDefinitions' => '',
        'ProvisionedThroughput' => self::SUPPORTED_PROVISIONED_THROUGHPUT_PARAMETERS,
        'GlobalSecondaryIndexes' => [
            [
                'IndexName' => '',
                'KeySchema' => '',
                'Projection' => '',
                'ProvisionedThroughput' => self::SUPPORTED_PROVISIONED_THROUGHPUT_PARAMETERS,
            ],
        ],
    ];

    /** @var array<string, mixed> */
    private array $updateSchema;

    public function __construct(
        /** @var array<string, mixed> */
        private array $describedSchema,
        /** @var array<string, mixed> */
        private array $currentSchema,
    ) {
        $this->tidyDescribedSchema();
        $this->renderUpdateSchema();
    }

    /**
     * @return array<string, mixed>
     */
    public function getUpdateSchema(): array
    {
        return $this->updateSchema;
    }

    private function renderUpdateSchema(): void
    {
        $this->setSchemaSkeleton();

        $this->generateSchemaVariation();
    }

    private function setSchemaSkeleton()
    {
        $schemaSkeleton = [
            'TableName' => $this->currentSchema['TableName'],
        ];

        $provisionedThroughput = [];

        if ($this->currentSchema['ProvisionedThroughput']['ReadCapacityUnits'] !== $this->describedSchema['ProvisionedThroughput']['ReadCapacityUnits']) {
            $readCapacityUnits = $this->currentSchema['ProvisionedThroughput']['ReadCapacityUnits'];
            $provisionedThroughput['ReadCapacityUnits'] = $readCapacityUnits;
        }


        if ($this->currentSchema['ProvisionedThroughput']['WriteCapacityUnits'] !== $this->describedSchema['ProvisionedThroughput']['WriteCapacityUnits']) {
            $writeCapacityUnits = $this->currentSchema['ProvisionedThroughput']['WriteCapacityUnits'];
            $provisionedThroughput['WriteCapacityUnits'] = $writeCapacityUnits;
        }

        if (count($provisionedThroughput) > 0) {
            $schemaSkeleton['ProvisionedThroughput'] = $provisionedThroughput;
        }

        $this->updateSchema = $schemaSkeleton;
    }

    /**
     * @throws Exception
     */
    private function generateSchemaVariation(): void
    {
        $this->setTableName();
        $this->setKeySchema();
        $this->setAttributeDefinitions();
        $this->setProvisionThroughput();
        $this->setGlobalSecondaryIndexes();
    }

    /**
     * @throws Exception
     */
    private function setTableName(): void
    {
        if ($this->currentSchema['TableName'] !== $this->describedSchema['TableName']) {
            throw new Exception('updateTable doesn\'t support changing the table name');
        }
    }

    /**
     * @throws Exception
     */
    private function setKeySchema(): void
    {
        $diff = $this->getArrayDiff($this->currentSchema['KeySchema'], $this->describedSchema['KeySchema']);
        if (count($diff) > 0) {
            throw new Exception('updateTable doesn\'t support changing the table key schema');
        }
    }

    private function setAttributeDefinitions(): void
    {
        $this->updateSchema['AttributeDefinitions'] = $this->currentSchema['AttributeDefinitions'];
    }

    private function setProvisionThroughput(): void
    {
        $this->updateSchema['ProvisionedThroughput']['ReadCapacityUnits'] = $this->currentSchema['ProvisionedThroughput']['ReadCapacityUnits'];
        $this->updateSchema['ProvisionedThroughput']['WriteCapacityUnits'] = $this->currentSchema['ProvisionedThroughput']['WriteCapacityUnits'];
    }

    private function setGlobalSecondaryIndexes(): void
    {
        foreach ($this->getIndexesDiff($this->currentSchema, $this->describedSchema) as $newSecondaryIndex) {
            $this->updateSchema['GlobalSecondaryIndexUpdates'][] = [
                'Create' => $newSecondaryIndex,
            ];
        }

        foreach ($this->getIndexesDiff($this->describedSchema, $this->currentSchema) as $deletedSecondaryIndex) {
            $this->updateSchema['GlobalSecondaryIndexUpdates'][] = [
                'Delete' => [
                    'IndexName' => $deletedSecondaryIndex['IndexName'],
                ],
            ];
        }

        $updatedParameters = $this->getArrayDiff($this->currentSchema['GlobalSecondaryIndexes'], $this->describedSchema['GlobalSecondaryIndexes']);
        foreach ($updatedParameters as $updatedParameter) {
            $this->updateSchema['GlobalSecondaryIndexUpdates'][] = [
                'Update' => [
                    'IndexName' => '',
                ],
            ];
        }
    }

    /**
     * Before determining the array differences, we'll remove
     * any unsupported values from the described schema
     */
    private function tidyDescribedSchema(): void
    {
        $this->describedSchema = $this->removeUnsupportedParameters($this->describedSchema, self::SUPPORTED_PARAMETERS);
    }

    /**
     * @param array $parameters
     * @param array $supportedParameters
     * @return array
     */
    private function removeUnsupportedParameters(array $parameters, array $supportedParameters): array
    {
        foreach ($parameters as $parameter => $content) {
            if (in_array($parameter, array_keys($supportedParameters)) === false) {
                unset($parameters[$parameter]);
            } elseif (is_array($content) === true && is_array($supportedParameters[$parameter]) === true) {
                $parameters[$parameter] = $this->removeUnsupportedParameters($content, $supportedParameters[$parameter]);
            }
        }
        return $parameters;
    }

    /**
     * @param array $first
     * @param array $second
     * @return array
     */
    private function getArrayDiff(array $first, array $second): array
    {
        return array_udiff_assoc($first, $second, function($a, $b) {
            return intval($a !== $b);
        });
    }

    /**
     * Returns indexes that exist in $schemaOne, but not in $schemaTwo
     *
     * @param array $schemaOne
     * @param array $schemaTwo
     * @return array
     */
    private function getIndexesDiff(array $schemaOne, array $schemaTwo): array
    {
        $indexes = [];
        foreach ($schemaOne['GlobalSecondaryIndexes'] as $schemaOneGlobalSecondaryIndex) {
            $existsInOneOnly = true;
            foreach ($schemaTwo['GlobalSecondaryIndexes'] as $schemaTwoGlobalSecondaryIndex) {
                if ($schemaOneGlobalSecondaryIndex['IndexName'] === $schemaTwoGlobalSecondaryIndex['IndexName']) {
                    $existsInOneOnly = false;
                    break;
                }
            }
            if ($existsInOneOnly === true) {
                $indexes[] = $schemaOneGlobalSecondaryIndex;
            }
        }
        return $indexes;
    }

}
