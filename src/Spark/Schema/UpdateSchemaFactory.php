<?php

declare(strict_types=1);

namespace JLucki\ODM\Spark\Schema;

use Exception;

/**
 * The UpdateSchemaFactory renders an update schema array for the table formatted as per DynamoDB
 * requirements as outlined in the PHP SDK:
 *
 * https://docs.aws.amazon.com/aws-sdk-php/v2/api/class-Aws.DynamoDb.DynamoDbClient.html#_updateTable
 *
 * This schema is generated by comparing the original schema as provided by describeTable to the
 * current schema on the ItemInterface.
 *
 * Class SchemaFactory
 * @package JLucki\ODM\Spark\Schema
 */
class UpdateSchemaFactory
{

    /** @var array<string, mixed> */
    private array $schema;

    public function __construct(
        /** @var array<string, mixed> */
        private array $describedSchema,
        /** @var array<string, mixed> */
        private array $currentSchema,
    ) {
        $this->renderSchema();
    }

    /**
     * @return array<string, mixed>
     */
    public function getSchema(): array
    {
        return $this->schema;
    }

    private function renderSchema(): void
    {
        $this->setSchemaSkeleton();

        $this->generateSchemaVariation();
    }

    private function setSchemaSkeleton()
    {
        $schemaSkeleton = new Skeleton(
            $this->currentSchema['TableName'],
            $this->currentSchema['ProvisionedThroughput']['ReadCapacityUnits'],
            $this->currentSchema['ProvisionedThroughput']['WriteCapacityUnits'],
        );
        $this->schema = $schemaSkeleton->getArray(false);
    }

    private function generateSchemaVariation()
    {
        $supportedParameters = [
            'TableName',
            'KeySchema',
            'AttributeDefinitions',
            'ProvisionThroughput',
            'GlobalSecondaryIndexes',
        ];

        foreach ($this->currentSchema as $parameter => $value) {
            switch ($parameter) {
                case 'TableName':
                    $this->setTableName();
                    break;
                case 'KeySchema':
                    $this->setKeySchema();
                    break;
                case 'AttributeDefinitions':
                    $this->setAttributeDefinitions();
                    break;
                case 'ProvisionThroughput':
                    $this->setProvisionThroughput();
                    break;
                case 'GlobalSecondaryIndexes':
                    $this->setGlobalSecondaryIndexes();
                    break;
                default:
                    // unsupported parameter, safe to ignore
            }
        }
    }

    /**
     * @throws Exception
     */
    private function setTableName(): void
    {
        if ($this->currentSchema['TableName'] !== $this->describedSchema['Table']) {
            throw new Exception('updateTable doesn\'t support changing the table name');
        }
    }

    private function setKeySchema(): void
    {
    }

    private function setAttributeDefinitions(): void
    {
    }

    private function setProvisionThroughput(): void
    {
    }

    private function setGlobalSecondaryIndexes(): void
    {
    }

}
